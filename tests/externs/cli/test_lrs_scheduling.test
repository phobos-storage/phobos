#!/bin/bash

#
#  All rights reserved (c) 2014-2022 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the License, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/utils.sh
. $test_dir/utils_generation.sh

phobosd_client="$test_dir/utils/.libs/phobosd-client"

function setup()
{
    export PHOBOS_LRS_lock_file="$test_dir/phobosd.lock"
    EVENT_FILE="$test_dir/test_daemon_scheduling_events"

    setup_test_dirs
    rm -f "$PHOBOS_LRS_lock_file"
    setup_dummy_files 1 1k 1

    setup_tables
    invoke_lrs_debug &
    wait_for_lrs
    last_read=$(now)
}

function cleanup()
{
    cleanup_dummy_files
    cleanup_test_dirs
    rm -f "$EVENT_FILE"

    kill $(pgrep phobosd)
    drop_tables
}

function test_sync_after_put_get()
{
    local prefix=$(generate_prefix_id)

    local oid=${prefix}_id
    local dir="$DIR_TEST_OUT"
    local file="${FILES[0]}"

    # XXX last_read has to be updated outside of get_daemon_event due to the
    # way sub shells and functions work
    last_read=$(now)
    $phobos dir add "$dir"
    $phobos dir format --fs posix --unlock "$dir"

    $phobos put --family dir "$file" $oid

    local res=$(get_daemon_event "sync" $last_read)
    last_read=$(now)

    echo "$res" | grep "medium=$dir" || error "$dir should have been flushed"
    echo "$res" | grep "rc=0" || error "Synchronisation of $file failed"

    # FIXME For some reason, last_read can be smaller than the timestamps in
    # EVENT_FILE. This sleep seems to prevent this issue. Using the timestamps
    # may not be so much robust.
    sleep 0.1
    $phobos get $oid "$TEST_DIR_OUT/$(basename $file)"

    local res=$(get_daemon_event "sync" $last_read)
    last_read=$(now)

    if [ ! -z "$res" ]; then
        error "No synchronisation should occur after a get operation"
    fi
}

function check_fair_share_min_max()
{
    local values
    local min
    local max

    values=$($valg_phobos sched fair_share --type LTO5)
    min=$(echo "$values" | grep min)
    max=$(echo "$values" | grep max)

    echo "$min" | grep "$1" ||
        error "Invalid min in '$min'. Expected '$1'"
    echo "$max" | grep "$2" ||
        error "Invalid max in '$max'. Expected '$2'"
}

function test_conf_set()
{
    $valg_phobos sched fair_share --type LTO5 --min "0,1,2" --max "1,2,3"
    check_fair_share_min_max "0,1,2" "1,2,3"

    $valg_phobos sched fair_share --type LTO5 --min "1,2,3" --max "0,1,2"
    check_fair_share_min_max "1,2,3" "0,1,2"
}

function test_fair_share_conf_at_startup()
{
    export PHOBOS_IO_SCHED_TAPE_fair_share_lto5_min="12,12,12"
    export PHOBOS_IO_SCHED_TAPE_fair_share_lto5_max="13,13,13"

    trap "waive_lrs; drop_tables" EXIT
    setup_tables
    invoke_lrs

    check_fair_share_min_max "12,12,12" "13,13,13"
    unset PHOBOS_IO_SCHED_TAPE_fair_share_lto5_min
    unset PHOBOS_IO_SCHED_TAPE_fair_share_lto5_max

    trap drop_tables EXIT
    waive_lrs
    trap "" EXIT
    drop_tables
}

function setup_phobosd_client()
{
    setup_test_dirs

    DIRS=(
        "$DIR_TEST_OUT/dir1"
        "$DIR_TEST_OUT/dir2"
        "$DIR_TEST_OUT/dir3"
        "$DIR_TEST_OUT/dir4"
    )

    setup_tables
    export PHOBOS_LRS_sync_nb_req="tape=1,dir=1,rados_pool=1"
    # 10s to make sure the sync don't happen due to timeouts
    export PHOBOS_LRS_sync_time_ms="tape=10000,dir=10000,rados_pool=10000"
    invoke_lrs

    for dir in "${DIRS[@]}"; do
        mkdir "$dir"
        $phobos dir add -T "common,$dir" "$dir"
        $phobos dir format "$dir"
    done
}

function cleanup_phobosd_client()
{
    waive_lrs
    drop_tables
    rm -rf "$DIR_TEST"
}

function test_phobosd_client()
{
    waive_lrs
    export PHOBOS_IO_SCHED_DIR_read_algo="fifo"
    export PHOBOS_IO_SCHED_DIR_write_algo="fifo"
    invoke_lrs

    $phobos dir unlock "${DIRS[0]}" "${DIRS[1]}"

    $phobosd_client -vvv --exit-on-error --stdin << EOF
write 1
recv 1 write_alloc
release 1
recv 2 write_release

read 1 ${DIRS[0]} ${DIRS[1]}
recv 3 read_alloc
release 3

batch 2 write 1
recv 5 write_alloc
recv 6 write_alloc

release 5
recv 7 write_release

release 6
recv 8 write_release
quit
EOF
    $phobos dir lock "${DIRS[@]}"
}

TESTS=(
    "test_fair_share_conf_at_startup"
    "setup; test_sync_after_put_get; test_conf_set; cleanup"
    "setup_phobosd_client; \
        test_phobosd_client; \
     cleanup_phobosd_client"
)
