#!/bin/bash

#
#  All rights reserved (c) 2014-2025 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the Licence, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Integration test for phobos_locate call
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/tape_drive.sh
. $test_dir/utils_generation.sh
. test_locate_common.sh

HALF_SIZE=1024
((FULL_SIZE=HALF_SIZE * 2))

function dir_setup
{
    setup_tables
    invoke_lrs

    export PHOBOS_STORE_default_family="dir"
    export dirs="
        $(mktemp -d "$PWD/test.pho.XXXX")
        $(mktemp -d "$PWD/test.pho.XXXX")
        $(mktemp -d "$PWD/test.pho.XXXX")
    "
    echo "adding directories $dirs"
    $phobos dir add $dirs
    $phobos dir format --fs posix --unlock $dirs
}

function tape_init_setup
{
    setup_tables
    invoke_tlc_bis
    invoke_daemons
}

function tape_setup
{
    local N_TAPES=2
    local N_DRIVES_L5=4
    local N_DRIVES_L6=4
    local LTO5_TAGS=$TAGS,lto5
    local LTO6_TAGS=$TAGS,lto6

    tape_init_setup

    export PHOBOS_STORE_default_family="tape"

    # get LTO5 tapes
    local lto5_tapes="$(get_tapes L5 $N_TAPES)"
    $phobos tape add --tags $LTO5_TAGS --type lto5 "$lto5_tapes"

    # get LTO6 tapes
    local lto6_tapes="$(get_tapes L6 $N_TAPES)"
    $phobos tape add --tags $LTO6_TAGS --type lto6 "$lto6_tapes"

    # set tapes
    export tapes="$lto5_tapes,$lto6_tapes"

    # unlock all tapes
    for t in $tapes; do
        $phobos tape unlock $t
    done

    # get drives
    local drives="$(get_lto_drives 5 ${N_DRIVES_L5}) \
                  $(get_lto_drives 6 ${N_DRIVES_L6})"
    $phobos drive add $drives

    # show a drive info
    local dr1=$(echo $drives | awk '{print $1}')
    # check drive status
    $phobos drive list --output adm_status $dr1 --format=csv |
        grep "^locked" || error "Drive should be added with locked state"

    # unlock all drives
    for d in $($phobos drive list); do
        $phobos drive unlock $d
    done

    # format lto5 tapes
    $phobos tape format $lto5_tapes --unlock
    # format lto6 tapes
    $phobos tape format $lto6_tapes --unlock
}

function dir_locked_splits_setup
{
    # start with a clean/empty phobos DB but no daemon is online yet
    setup_tables
    invoke_lrs

    export dirs="
        $(mktemp -d /tmp/test.pho.XXXX)
        $(mktemp -d /tmp/test.pho.XXXX)
        $(mktemp -d /tmp/test.pho.XXXX)
        $(mktemp -d /tmp/test.pho.XXXX)
        $(mktemp -d /tmp/test.pho.XXXX)
        $(mktemp -d /tmp/test.pho.XXXX)
        $(mktemp -d /tmp/test.pho.XXXX)
        $(mktemp -d /tmp/test.pho.XXXX)
    "

    $phobos dir add $dirs
    $phobos dir format --fs posix --unlock $dirs

    waive_lrs

    export PHOBOS_IO_fs_block_size="dir=0,tape=0"
    for dir in $dirs; do
        resize_medium $dir $HALF_SIZE
    done

    invoke_lrs
}

function cleanup
{
    unset PHOBOS_STORE_default_family
}

function dir_cleanup
{
    waive_lrs
    drop_tables
    rm -rf $dirs
    rm -rf /tmp/out*
}

function tape_cleanup
{
    waive_daemons
    waive_tlc_bis
    drop_tables
    drain_all_drives
    rm -rf /tmp/out*
}

function test_locate_update_timestamp_without_lock
{
    local drive=$(get_lto_drives 5 1)
    $phobos drive add --unlock $drive

    local tape=$(get_tapes L5 1)
    $phobos tape add --type lto5 $tape
    $phobos tape format --unlock $tape

    local oid=$(generate_prefix_id)
    $phobos put /etc/hosts $oid ||
        error "Error while putting $oid"

    $phobos drive unload $drive

    checkpoint1=$(date +%s)
    sleep 1
    $phobos locate $oid
    sleep 1
    checkpoint2=$(date +%s)

    db_time=$($PSQL -t -c "SELECT last_locate FROM lock WHERE id = '${tape}_legacy';")
    db_time=$(date -d "$db_time" +%s)

    if [ $checkpoint1 -ge $db_time ] || [ $checkpoint2 -le $db_time ]; then
        error "Invalid locate timestamp"
    fi

    $phobos drive load $drive $tape

    db_time2=$($PSQL -t -c "SELECT last_locate FROM lock WHERE id = '${tape}_legacy';")
    db_time2=$(date -d "$db_time2" +%s)

    if [ $db_time -ne $db_time2 ]; then
        error "Loading tape erased last_locate timestamp"
    fi
}

function test_last_locate_timestamp
{
    local drive=$(get_lto_drives 5 1)
    $phobos drive add --unlock $drive

    local tapes=( $(get_tapes L5 2 | nodeset -e) )
    $phobos tape add --type lto5 ${tapes[@]}
    $phobos tape format --unlock ${tapes[0]}

    local oid=$(generate_prefix_id)
    $phobos put /etc/hosts $oid ||
        error "Error while putting $oid"

    waive_lrs

    export PHOBOS_LRS_locate_lock_expirancy=5000

    invoke_lrs

    date_start=$(date +%s)
    $phobos locate $oid
    $phobos tape format ${tapes[1]} || error "Format should have succeeded"
    date_end=$(date +%s)
    difference=$((date_end - date_start))

    test $difference -lt 5 ||
        error "Format should have waited for locate expirancy"
}

function test_locate_compatibility
{
    local N_TAPES=2
    local N_DRIVES=2
    local LTO5_TAGS="lto5"
    local LTO6_TAGS="lto6"
    local self_hostname="$(hostname -s)"
    local other_hostname="blob"
    local family="tape"

    # get LTO5 tapes
    local lto5_tapes="$(get_tapes L5 $N_TAPES)"
    $phobos tape add --tags $LTO5_TAGS --type lto5 "$lto5_tapes"

    # get LTO6 tapes
    local lto6_tapes="$(get_tapes L6 $N_TAPES)"
    $phobos tape add --tags $LTO6_TAGS --type lto6 "$lto6_tapes"

    # set tapes
    local tapes="$lto5_tapes,$lto6_tapes"

    # unlock all tapes
    for t in $tapes; do
        $phobos tape unlock $t
    done

    # get drives
    local lto6drives=$(get_lto_drives 6 $N_DRIVES)
    IFS=' ' read -r -a lto6drives <<< "$lto6drives"
    local self_lto6drive="${lto6drives[0]}"
    local other_lto6drive="${lto6drives[1]}"

    local lto5drives=$(get_lto_drives 5 $N_DRIVES)
    IFS=' ' read -r -a lto5drives <<< "$lto5drives"
    local self_lto5drive="${lto5drives[0]}"
    local other_lto5drive="${lto5drives[1]}"

    # first add to the current host one LT05 and one LT06 drive
    $phobos drive add --unlock $other_lto6drive
    $phobos drive add --unlock $other_lto5drive

    # format lto5 tapes
    $phobos tape format $lto5_tapes --unlock
    # format lto6 tapes
    $phobos tape format $lto6_tapes --unlock

    # add the second LT05 and LT06 drives to the current host
    $phobos drive add --unlock $self_lto5drive $self_lto6drive

    # put an object on the two LT06 tapes
    local oid="oid_get_locate"
    $phobos put --lyt-params repl_count=2 --tags $LTO6_TAGS /etc/hosts $oid ||
        error "Error while putting $oid"

    waive_daemons

    # unload the tapes so that the daemon doesn't take any lock when waking up
    drain_all_drives

    invoke_tlc

    # change the host of one lto5 and one lto6 drive to give them to
    # $other_hostname
    $PSQL << EOF
UPDATE device SET host = '$other_hostname' WHERE path = '$other_lto5drive';
UPDATE device SET host = '$other_hostname' WHERE path = '$other_lto6drive';
EOF

    invoke_lrs

    # At this point:
    #   - the current host has one LT05 and one LTO6 drive
    #   - the other host has the other LT05 and LT06 drives

    local locate_hostname=$($valg_phobos locate $oid)
    if [ "$locate_hostname" != "$self_hostname" ]; then
        error "locate on $oid returned $locate_hostname instead of" \
              "$self_hostname when every medium is unlocked and" \
              "$self_hostname has compatible devices"
    fi

    # The previous locate added locks to the media with the hostname
    # $self_hostname, so --focus-host $other_hostname should be ignored here
    locate_hostname=$($valg_phobos locate --focus-host $other_hostname $oid)
    if [ "$locate_hostname" != "$self_hostname" ]; then
        error "locate on $oid returned $locate_hostname instead of" \
              "$self_hostname even though it has a lock on a replica"
    fi

    local tapes_to_unlock=$($phobos tape list -o name,lock_hostname |
                            grep $self_hostname | cut -d '|' -f2 | xargs)
    IFS=' ' read -r -a tapes_to_unlock <<< "$tapes_to_unlock"
    $phobos lock clean --force -f tape -t media

    locate_hostname=$($valg_phobos locate --focus-host $other_hostname $oid)
    if [ "$locate_hostname" != "$other_hostname" ]; then
        error "locate on $oid returned $locate_hostname instead of" \
              "$other_hostname when every medium and drive is unlocked and" \
              "--focus-host is set to $other_hostname"
    fi

    # "lock clean" cannot be used here because the locks are attributed to
    # another hostname
    # Lock all the drives $self_hostname has access to
    $PSQL << EOF
DELETE FROM lock WHERE hostname != '$self_hostname';
EOF

    $phobos drive lock $self_lto5drive $self_lto6drive

    locate_hostname=$($valg_phobos locate --focus-host $other_hostname $oid)
    if [ "$locate_hostname" != "$other_hostname" ]; then
        error "locate on $oid returned $locate_hostname instead of" \
              "$other_hostname when $self_hostname has no compatible" \
              "unlocked device"
    fi

    $PSQL << EOF
DELETE FROM lock WHERE hostname != '$self_hostname';
EOF

    locate_hostname=$($valg_phobos locate --focus-host $self_hostname $oid)
    if [ "$locate_hostname" != "$other_hostname" ]; then
        error "locate on $oid returned $locate_hostname instead of" \
              "$other_hostname when $self_hostname has no compatible" \
              "unlocked device but $other_hostname does"
    fi

    # lock all the drives $other_hostname has, unlock the drives $self_hostname
    # has, and remove all concurrency locks
    # "drive lock" cannot be used because the drive belongs to another host
    $PSQL << EOF
UPDATE device SET adm_status = 'locked' WHERE host = '$other_hostname';
DELETE FROM lock WHERE hostname != '$self_hostname';
EOF

    $phobos drive unlock --force $self_lto6drive

    locate_hostname=$($valg_phobos locate --focus-host $self_hostname $oid)
    if [ "$locate_hostname" != "$self_hostname" ]; then
        error "locate on $oid returned $locate_hostname instead of" \
              "$self_hostname when focus-host is set to $self_hostname and" \
              "$other_hostname has no usable device"
    fi

    locate_hostname=$($valg_phobos locate --focus-host $other_hostname $oid)
    if [ "$locate_hostname" != "$self_hostname" ]; then
        error "locate on $oid returned $locate_hostname instead of" \
              "$self_hostname even though $other_hostname has no usable" \
              "device and $self_hostname has a lock on a replica"
    fi
}

function test_locate_library
{
    local drive_bis=$(get_lto_drives_bis 6 1)
    local tape_bis=$(get_tapes_bis L6 1)
    local drive=$(get_lto_drives 6 1)
    local tape=$(get_tapes L6 1)
    local self_hostname="$(hostname -s)"
    local other_hostname="blob"

    $phobos drive add --unlock ${drive}
    $phobos drive add --unlock --library library_bis ${drive_bis}
    $phobos tape add --type lto6 ${tape}
    $phobos tape add --type lto6 --library library_bis ${tape_bis}
    $phobos tape format --unlock ${tape}
    $phobos tape format --unlock --library library_bis ${tape_bis}

    $phobos put --library legacy /etc/hosts legacy_obj

    waive_daemons
    waive_tlc_bis
    drain_all_drives

    # change the host of drive to $other_hostname
    $PSQL << EOF
UPDATE device SET host = '$other_hostname' WHERE path = '${drive}';
EOF

    invoke_tlc_bis
    invoke_daemons

    local locate_hostname=$($valg_phobos locate legacy_obj)
    if [ "${locate_hostname}" != "${other_hostname}" ]; then
        error "locate should returned ${other_hostname} that owns a drive in" \
              "the good library instead of ${locate_hostname}"
    fi
}

function test_locate_prelocking_compatibility
{
    local self_hostname="$(hostname -s)"
    local other_hostname="blob"

    local drives=($(get_lto_drives 6 2))
    local tapes=$(get_tapes L6 2)
    local drive_bis=$(get_lto_drives_bis 6 1)
    local tape_bis=$(get_tapes_bis L6 1)

    $phobos drive add --library library_bis --unlock ${drive_bis}
    $phobos drive add --unlock ${drives[@]}

    $phobos tape add --type lto6 --unlock ${tapes[@]}
    $phobos tape add --type lto6 --library library_bis --unlock ${tape_bis}
    $phobos tape format ${tapes[@]}
    $phobos tape format --library library_bis ${tape_bis}

    $phobos put -l raid4 /etc/hosts oid
    $phobos drive unload ${drives[0]}
    $phobos drive unload ${drives[1]}
    $phobos drive unload --library library_bis ${drive_bis}

    waive_daemons
    waive_tlc_bis
    drain_all_drives

    # change the host of drives in library bis to $other_hostname
    $PSQL << EOF
UPDATE device SET host = '$other_hostname' WHERE path = '${drives[0]}';
UPDATE device SET host = '$other_hostname' WHERE path = '${drives[1]}';
EOF

    invoke_tlc_bis
    invoke_daemons

    local locate_hostname=$($valg_phobos locate --focus-host \
                            $other_hostname oid)
    if [ "${locate_hostname}" != "${other_hostname}" ]; then
        error "locate should return ${other_hostname} that owns 2 drives in" \
              "the good library instead of ${locate_hostname}"
    fi

    # check that the tape in the other library is not lock by $other_hostname
    local lock_hostname=$($phobos tape list -o lock_hostname ${tape_bis})
    if [ "${lock_hostname}" != "None" ]; then
        error "${other_hostname} shouldn't have locked ${tape_bis} as he has " \
              "no compatible devices"
    fi
}

TEST_CLEANUP=cleanup

# test locate on dir
TESTS=("dir_setup; \
        test_medium_locate dir; \
        test_locate_cli dir; \
        test_get_locate_cli dir; \
        test_locate_update_timestamp dir; \
        dir_cleanup")
TESTS+=("dir_locked_splits_setup; \
         test_locate_locked_splits dir $FULL_SIZE; \
         dir_cleanup")

if [[ -w /dev/changer ]]; then
    TESTS+=("tape_setup; \
             test_medium_locate tape; \
             test_locate_cli tape; \
             test_get_locate_cli tape; \
             test_locate_update_timestamp tape; \
             tape_cleanup")
# XXX: This test remains disabled until locate/load command sequence is fixed
#    TESTS+=("tape_init_setup; \
#             test_locate_update_timestamp_without_lock; \
#             tape_cleanup")
    TESTS+=("tape_init_setup; \
             test_last_locate_timestamp; \
             tape_cleanup");
    TESTS+=("tape_init_setup; \
             test_locate_compatibility; \
             tape_cleanup")
    TESTS+=("tape_init_setup; \
             test_locate_library; \
             tape_cleanup")
    TESTS+=("tape_init_setup; \
             test_locate_prelocking_compatibility; \
             tape_cleanup")
fi
