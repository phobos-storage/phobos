#!/bin/bash

#
#  All rights reserved (c) 2014-2024 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the License, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/tape_drive.sh
. $test_dir/utils_generation.sh

lrs_simple_client="$test_dir/externs/cli/lrs_simple_client"
pho_ldm_helper="$test_dir/../scripts/pho_ldm_helper"

function setup
{
    export PHOBOS_LRS_lock_file="$test_bin_dir/phobosd.lock"
}

function cleanup
{
    drop_tables
    if [[ -w /dev/changer ]]; then
        drain_all_drives
    fi
}

function test_invalid_lock_file()
{
    trap waive_lrs EXIT
    drop_tables
    setup_tables

set +e
    export PHOBOS_LRS_lock_file="/phobosd.lock"
    rm -rf "$PHOBOS_LRS_lock_file"
    invoke_lrs ||
        error "Should have succeeded with valid folder '/'"
    waive_lrs

    local folder="$test_bin_dir/a"
    export PHOBOS_LRS_lock_file="$folder/phobosd.lock"
    rm -rf "$folder"
    invoke_lrs &&
        error "Should have failed with non-existing folder '$folder'"

    mkdir -p "$folder"
    invoke_lrs ||
        error "Should have succeeded after creating valid folder '$folder'"
    waive_lrs

    rm -rf "$folder"

    # Create $folder as a simple file to fail the "is dir" condition
    touch "$folder"
    invoke_lrs &&
        error "Should have failed because '$folder' is not a directory"

    rm -rf "$folder"
set -e

    unset PHOBOS_LRS_lock_file
    cleanup
    trap - EXIT
}

function test_invalid_db_schema_version
{
    trap waive_lrs EXIT
    setup_tables

set +e
    VERSION=$($PSQL -qtc "SELECT version FROM schema_info;" | xargs)
    $PSQL -c "UPDATE schema_info SET version = '0.0';"
    invoke_lrs &&
        error "Should have failed with bad db schema version"
set -e

    $PSQL -c "UPDATE schema_info SET version = '$VERSION';"
    trap - EXIT
    waive_lrs
    cleanup
}

function test_multiple_instances
{
    setup_tables

    pidfile="/tmp/pidfile"

    $phobosd -i &
    first_process=$!

    sleep 1

    timeout 60 $LOG_COMPILER $phobosd -i &
    second_process=$!

    wait $second_process && true
    rc=$?
    kill $first_process

    # Second daemon error code should be EEXIST, which is 17
    test $rc -eq 17 ||
        error "Second daemon instance does not get the right error code"

    drop_tables
}

function test_recover_dir_old_locks
{
    setup_tables

    dir0=$(mktemp -d /tmp/test_recover_dir_old_locksXXX)
    dir1=$(mktemp -d /tmp/test_recover_dir_old_locksXXX)
    dir2=$(mktemp -d /tmp/test_recover_dir_old_locksXXX)
    dir3=$(mktemp -d /tmp/test_recover_dir_old_locksXXX)
    $phobos dir add --unlock ${dir0} ${dir1} ${dir2} ${dir3}

    host=$(hostname -s)
    pid=$BASHPID

    # Update media to lock them by a 'daemon instance'
    # Only one is locked by this host
    $PSQL -c \
        "insert into lock (type, id, hostname, owner) values
             ('media'::lock_type, '${dir0}_legacy', '$host', $pid),
             ('media_update'::lock_type, '${dir1}_legacy', '$host', $pid),
             ('media'::lock_type, '${dir2}_legacy', '${host}other', $pid),
             ('media_update'::lock_type, '${dir3}_legacy', '${host}other',
              $pid);"

    # Start and stop the lrs daemon
    PHOBOS_LRS_families="dir" timeout --preserve-status 10 $phobosd -vv -i &
    daemon_process=$!

    wait $daemon_process && true
    rc=$?
    rmdir ${dir0} ${dir1} ${dir2} ${dir3}

    # check return status
    test $rc -eq 0 ||
        error "Daemon process returns an error status : ${rc}"

    # Check only the lock of the correct hostname is released
    lock=$($phobos dir list -o lock_hostname ${dir0})
    [ "None" == "$lock" ] || error "${dir0} should be unlocked"

    lock=$($phobos dir list -o lock_hostname ${dir1})
    [ "None" == "$lock" ] || error "${dir1} should be unlocked"

    lock=$($phobos dir list -o lock_hostname ${dir2})
    [ "${host}other" == "$lock" ] || error "${dir2} should be locked"

    lock=$($PSQL -t -c "select hostname from lock
                         where id = '${dir3}_legacy';" |
           xargs)
    [ "${host}other" == "$lock" ] || error "${dir3} should be locked"

    drop_tables
}

function test_remove_invalid_media_locks
{
    setup_tables

    dir0=$(mktemp -d /tmp/test_remove_invalid_media_locksXXX)
    dir1=$(mktemp -d /tmp/test_remove_invalid_media_locksXXX)

    host=$(hostname -s)
    pid=$BASHPID

    # Update media to lock them by a 'daemon instance'
    # Only one is locked by this host
    $PSQL -c \
        "insert into device (family, model, id, host, adm_status, path, library)
            values ('dir', NULL, 'blob:${dir0}', 'blob', 'unlocked', '${dir0}',
                    'legacy'),
                   ('dir', NULL, 'blob:${dir1}', 'blob', 'unlocked',
                    '${dir1}', 'legacy');"
    $PSQL -c \
        "insert into media (family, model, id, adm_status, fs_type,
                            address_type, fs_status, stats, tags, library)
            values ('dir', NULL, '${dir0}', 'unlocked', 'POSIX', 'HASH1',
                    'blank', '{\"nb_obj\":0, \"logc_spc_used\":0, \
                               \"phys_spc_used\":0, \"phys_spc_free\":1024, \
                               \"nb_load\":0, \"nb_errors\":0, \
                               \"last_load\":0}', '[]', 'legacy'),
                   ('dir', NULL, '${dir1}', 'unlocked', 'POSIX', 'HASH1',
                    'blank', '{\"nb_obj\":0, \"logc_spc_used\":0, \
                               \"phys_spc_used\":0, \"phys_spc_free\":1024, \
                               \"nb_load\":0, \"nb_errors\":0, \
                               \"last_load\":0}', '[]', 'legacy');"
    $PSQL -c \
        "insert into lock (type, id, hostname, owner)
            values ('media'::lock_type, '${dir0}_legacy', '$host', $pid),
                   ('media_update'::lock_type, '${dir1}_legacy', '$host',
                    $pid);"

    # Start and stop the lrs daemon
    PHOBOS_LRS_families="dir" timeout --preserve-status 10 $phobosd -i &
    daemon_process=$!

    wait $daemon_process && true
    rc=$?
    rmdir ${dir0} ${dir1}

    # check return status
    test $rc -eq 0 ||
        error "Daemon process returns an error status : ${rc}"

    # Check only the locks of the correct hostname are released
    lock=$($phobos dir list -o lock_hostname ${dir0})
    [ "None" == "$lock" ] || error "${dir0} should be unlocked"
    lock=$($PSQL -t -c \
               "select hostname from lock where id = '${dir1}_legacy';" |
           xargs)
    [ -z $lock ] || error "${dir1} should be unlocked"

    drop_tables
}

function test_recover_drive_old_locks
{
    setup_tables

    $phobos drive add --unlock /dev/st[0-1]

    host=$(hostname -s)
    pid=$BASHPID

    # Inserting directly into the lock table requires the
    # actual names of each drive, so we fetch them
    dev_st0_id=$($phobos drive list -o name /dev/st0)
    dev_st1_id=$($phobos drive list -o name /dev/st1)

    # Update devices to lock them by a 'daemon instance'
    # Only one is locked by this host
    $PSQL -c \
        "insert into lock (type, id, hostname, owner) values
             ('device'::lock_type, '${dev_st0_id}_legacy', '$host', $pid),
             ('device'::lock_type, '${dev_st1_id}_legacy', '${host}other', $pid);"

    # Start and stop the lrs daemon
    trap waive_tlc EXIT
    invoke_tlc
    PHOBOS_LRS_families="tape" timeout --preserve-status 10 $phobosd -i &
    daemon_process=$!

    wait $daemon_process && true
    rc=$?

    trap - EXIT
    waive_tlc

    # check return status
    test $rc -eq 0 ||
        error "Daemon process returns an error status : ${rc}"

    # Check that only the correct device is unlocked
    lock=$($phobos drive list -o lock_hostname /dev/st0)
    [ "None" == "$lock" ] || error "Device should be unlocked"

    lock=$($phobos drive list -o lock_hostname /dev/st1)
    [ "${host}other" == "$lock" ] || error "Device should be locked"

    drop_tables
}

function test_remove_invalid_device_locks
{
    setup_tables

    $phobos drive add --unlock /dev/st0

    host=$(hostname -s)
    pid=$BASHPID
    fake_host="blob"

    dev_st0_id=$($phobos drive list -o name /dev/st0)
    dev_st1_model=$($phobos drive list -o model /dev/st0)
    dev_st1_id="fake_id_remove_invalid_device_locks"

    $PSQL -c \
        "insert into device (family, model, id, host, adm_status, path, library)
            values ('tape', '$dev_st1_model', '$dev_st1_id', '$fake_host',
                    'unlocked', '/dev/st1', 'legacy');"
    $PSQL -c \
        "insert into lock (type, id, hostname, owner)
            values ('device'::lock_type, '${dev_st0_id}_legacy',
                    '$host',$pid);"
     $PSQL -c \
         "insert into lock (type, id, hostname, owner)
            values ('device'::lock_type, '${dev_st1_id}_legacy',
                     '$host',$pid);"

    # Start and stop the lrs daemon
    trap waive_tlc EXIT
    invoke_tlc
    PHOBOS_LRS_families="tape" timeout --preserve-status 10 $phobosd -i &
    daemon_process=$!

    wait $daemon_process && true
    rc=$?

    trap - EXIT
    waive_tlc

    # check return status
    test $rc -eq 0 ||
        error "Daemon process returns an error status : ${rc}"

    # Check only the lock of the correct hostname is released
    lock=$($phobos drive list -o lock_hostname /dev/st0)
    [ "None" == "$lock" ] || error "Dir /dev/st0 should be unlocked"

    lock=$($phobos drive list -o lock_hostname /dev/st1)
    [ "None" == "$lock" ] || error "Dir /dev/st1 should be unlocked"


    drop_tables
}

function test_wait_end_of_IO_before_shutdown()
{
    local dir=$(mktemp -d)

    trap "waive_lrs; rm -rf '$dir'" EXIT
    setup_tables
    invoke_lrs -vv

    $phobos dir add "$dir"
    $phobos dir format --unlock --fs posix "$dir"

    local release_medium_name=$($lrs_simple_client put dir)

    kill $PID_LRS
    sleep 1
    ps --pid $PID_LRS || error "Daemon should still be online"

    # send release request
    $lrs_simple_client release 1 $release_medium_name dir

    timeout 10 tail --pid=$PID_LRS -f /dev/null
    if [[ $? != 0 ]]; then
        error "Daemon not stopped after 10 seconds"
    fi
    PID_LRS=0
    trap - EXIT
    rm -rf '$dir'
    cleanup
}

function wait_for_process_end()
{
    local pid="$1"
    local count=0

    while ps --pid "$pid"; do
        if (( count > 10 )); then
            error "Process $pid should have stopped after 10s"
        fi
        ((count++)) || true
        sleep 1
    done
}

function test_cancel_waiting_requests_before_shutdown()
{
    local dir=$(mktemp -d)
    local file=$(mktemp)
    local res_file="res_file"

    trap "waive_lrs; rm -rf '$dir' '$file' '$res_file'" EXIT
    setup_tables
    invoke_lrs

    $phobos dir add "$dir"
    $phobos dir format --unlock --fs posix "$dir"

    local release_medium_name=$($lrs_simple_client put dir)

    # this request will be waiting in the LRS as the only dir is used by
    # lrs_simple_client
    ( set +e; $phobos put --family dir "$file" oid; echo $? > "$res_file" ) &
    local put_pid=$!

    # wait for the request to reach the LRS
    sleep 1

    kill $PID_LRS

    # "timeout wait $put_pid" cannot be used here as "put_pid" will not be a
    # child of 'timeout'
    wait_for_process_end $put_pid

    if [[ $(cat "$res_file") == 0 ]]; then
        error "Waiting request should have been canceled"
    fi

    # send the release request
    $lrs_simple_client release 1 $release_medium_name dir

    timeout 10 tail --pid=$PID_LRS -f /dev/null
    if [[ $? != 0 ]]; then
        error "Daemon not stopped after 10 seconds"
    fi
    PID_LRS=0
    trap - EXIT
    rm -rf '$dir' '$file' '$res_file'
    cleanup
}

function test_refuse_new_request_during_shutdown()
{
    local dir=$(mktemp -d)
    local file=$(mktemp)

    trap "waive_lrs; rm -rf '$dir' '$file'" EXIT
    setup_tables
    invoke_lrs

    $phobos dir add "$dir"
    $phobos dir format --unlock --fs posix "$dir"

    local release_medium_name=$($lrs_simple_client put dir)

    kill $PID_LRS

    $phobos put --family dir "$file" oid &&
        error "New put should have failed during shutdown"

    # send the release request
    $lrs_simple_client release 1 $release_medium_name dir

    timeout 10 tail --pid=$PID_LRS -f /dev/null
    if [[ $? != 0 ]]; then
        error "Daemon not stopped after 10 seconds"
    fi
    PID_LRS=0
    trap - EXIT
    rm -rf '$dir' '$file'
    cleanup
}

function test_mount_failure_during_read_response()
{
    local file=$(mktemp)
    local tape=$(get_tapes L6 1)
    local drive=$(get_lto_drives 6 1)
    local algo=$1

    trap "waive_daemons; rm -f '$file'" EXIT
    export PHOBOS_IO_SCHED_TAPE_read_algo="$algo"
    setup_tables
    invoke_daemons

    dd if=/dev/urandom of="$file" bs=4096 count=5

    $phobos tape add --type lto6 "$tape"
    $phobos drive add "$drive"
    $phobos drive unlock "$drive"
    $phobos tape format --unlock "$tape"

    $phobos put "$file" oid ||
        error "Put command failed"

    # Force mount to fail
    local save_mount_cmd=$PHOBOS_LTFS_cmd_mount
    export PHOBOS_LTFS_cmd_mount="sh -c 'exit 1'"
    export PHOBOS_LRS_max_health=3
    waive_lrs
    invoke_lrs

    $phobos get oid "${file}.out" &&
        error "Get command should have failed"

    ps --pid "$PID_LRS"

    export PHOBOS_LTFS_cmd_mount="$save_mount_cmd"
    waive_daemons
    trap - EXIT
    rm -f "$file"
    cleanup
}

function format_wait_and_check()
{
    local format_pid
    local ENODEV=19
    local rc

    $phobos tape format --unlock "$1" &
    format_pid=$!

    sleep 3

    kill -9 $format_pid && true

    wait $format_pid && true
    rc=$?

    test $rc -eq $ENODEV ||
        error "Format command should have failed because $2" \
              "(error received $rc, expected $ENODEV 'ENODEV')"
}

function test_format_fail_without_suitable_device()
{
    local drive=$(get_lto_drives 5 1)
    local tape=$(get_tapes L6 1)

    trap waive_daemons EXIT

    setup_tables
    invoke_daemons

    $phobos tape add --type lto6 "$tape"
    format_wait_and_check "$tape" "no device is available"

    $phobos drive add "$drive"
    format_wait_and_check "$tape" "no device thread is running"

    $phobos drive unlock "$drive"
    format_wait_and_check "$tape" \
                          "the drive '$drive' and tape '$tape' are incompatible"

    trap - EXIT
    waive_daemons
    cleanup
}

function test_retry_on_error_setup()
{
    local algo=$1

    export PHOBOS_IO_SCHED_TAPE_read_algo="$algo"

    drain_all_drives
    drop_tables
    setup_tables
    invoke_daemons

    setup_test_dirs
    setup_dummy_files 2 1k 1
}

function test_retry_on_error_cleanup()
{
    waive_daemons
    drain_all_drives

    cleanup_dummy_files
    cleanup_test_dirs
    rm -f /tmp/mount_count

    drop_tables
}

# Custom mount script that fails the first nb_retries=$1 mounts and succeeds on
# the third attempt.
function mount_failure_cmd()
{
    local nb_retries=$1

    echo 0 > /tmp/mount_count
    echo "bash -c \"
mount_count=\$(cat /tmp/mount_count)
echo mount count: \$mount_count

if (( mount_count == $nb_retries )); then
    $pho_ldm_helper mount_ltfs '%s' '%s'
    exit
fi
((mount_count++))
echo \$mount_count > /tmp/mount_count
exit 1
\""
}

function test_retry_on_error()
{
    local drives=$(get_lto_drives 6 3)
    local tapes=$(get_tapes L6 3)
    local file=${FILES[1]}
    local oid=$(basename "$file")

    $phobos drive add --unlock $drives

    $phobos tape add --type lto6 "$tapes"
    $phobos tape format --unlock "$tapes"

    $phobos put --layout raid1 --lyt-params "repl_count=3" "$file" "$oid"

    waive_daemons
    drain_all_drives
    export PHOBOS_LRS_max_health=1
    invoke_tlc

    local cmd=$(mount_failure_cmd 2)

    echo 0 > /tmp/mount_count
    local save_mount_cmd=$PHOBOS_LTFS_cmd_mount
    export PHOBOS_LTFS_cmd_mount="$cmd"
    invoke_lrs
    $phobos phobosd ping

    $phobos get "$oid" "$DIR_TEST_OUT"/"$oid"
    export PHOBOS_LTFS_cmd_mount="$save_mount_cmd"
    unset PHOBOS_LRS_max_health
}

function test_fair_share_max_reached()
{
    local drive=$(get_lto_drives 5 1)
    local tape=$(get_tapes L5 1)
    local oid=test_fair_share_max_reached

    drop_tables
    setup_tables
    export PHOBOS_IO_SCHED_TAPE_dispatch_algo=fair_share
    trap waive_daemons EXIT
    invoke_daemons

    # With this setup, any get will wait
    $phobos sched fair_share --type LTO5 --min 0,0,0 --max 0,1,1

    $phobos drive add --unlock $drive
    $phobos tape add --type lto5 "$tape"
    $phobos tape format --unlock "$tape"

    $phobos put /etc/hosts $oid

    local lock_hostname=$($phobos tape list -o lock_hostname $tape)
    rm -f /tmp/$oid
    $phobos get $oid /tmp/$oid &
    local pid=$!
    sleep 1

    local new_lock_hostname=$($phobos tape list -o lock_hostname $tape)
    if [ "$lock_hostname" != "$new_lock_hostname" ]; then
        # make sure that we don't unlock the medium when trying to alloc the
        # read request and we don't have any device available.
        error "Lock has been changed! Previous hostname: $lock_hostname," \
            "Current hostname: $new_lock_hostname"
    fi

    ps $pid || error "phobos get process is not running"
    $phobos sched fair_share --type LTO5 --max 1,1,1
    wait || error "Get should have succeeded after setting max reads to 1"

    export PHOBOS_IO_SCHED_TAPE_dispatch_algo=none
    trap - EXIT
    waive_daemons
    cleanup
}

function test_no_DAEMON_PID_FILEPATH_lock_cleaned()
{
    setup_tables

    # Start LRS daemon without DAEMON_PID_FILEPATH
set +e
    $phobosd -v
    rc=$?
set -e

    # Check that daemon starts fails returning EXIT_FAILURE == 1
    if (( rc != 1 )); then
        if (( rc == 0 )); then
           pkill phobosd
        fi

        error "Daemon starts must return 1 with no DAEMON_PID_FILEPATH"
    fi

    # Wait (max 5s) for child end
    for i in `seq 5`; do
        if pgrep phobosd; then
            sleep 1
        else
            break
        fi
    done

    if [[ "${i}" == "5" ]]; then
        if pkill phobosd; then
            error "Child must fails when father has no DAEMON_PID_FILEPATH"
        fi
    fi

    # Check lock file is cleaned
    if [[ -f ${PHOBOS_LRS_lock_file} ]]; then
        error "Lock file must be cleared when daemon start fails"
    fi

    drop_tables
}

function test_health()
{
    local drive=$(get_lto_drives 5 1)
    local tape=$(get_tapes L5 1)

    setup_tables

    $phobos drive add --unlock "$drive"
    $phobos tape add --type LTO5 "$tape"

    export PHOBOS_LRS_max_health=3

    local cmd=$(mount_failure_cmd 2)
    export PHOBOS_LTFS_cmd_mount=$cmd

    trap waive_daemons EXIT
    invoke_daemons

    $phobos tape format --unlock "$tape"
    $phobos put /etc/hosts oid ||
        error "Put should have succeeded after 2 failures"

    # unmount LTFS
    waive_lrs
    invoke_lrs -vv

    # Reset error count for mount script
    echo 0 > /tmp/mount_count
    $phobos put --overwrite /etc/hosts oid &&
        error "Put shoud have failed after 4 errors"
    $phobos tape list -o adm_status | grep failed ||
        error "Tape should be set to failed once the max error is reached"
    $phobos drive list -o adm_status | grep failed ||
        error "Drive should be set to failed once the max error is reached"

    trap - EXIT
    waive_daemons
    cleanup
    # Reset error count for mount script
    echo 0 > /tmp/mount_count
    unset PHOBOS_LRS_max_health
    unset PHOBOS_LTFS_cmd_mount
}

function test_health_medium_failure()
{
    local drives=($(get_lto_drives 5 2))
    local tape=$(get_tapes L5 1)
    local cmd=$(mount_failure_cmd 2)

    export PHOBOS_LRS_max_health=3
    export PHOBOS_LTFS_cmd_mount=$cmd

    trap waive_daemons EXIT
    setup_tables
    invoke_daemons

    $phobos drive add --unlock ${drives[0]}
    $phobos drive add ${drives[1]}
    $phobos tape add --type LTO5 "$tape"

    $phobos tape format --unlock "$tape"
    $phobos put /etc/hosts oid ||
        error "Put should have succeeded after 2 failures"

    # unmount LTFS
    waive_lrs

    $phobos drive lock ${drives[0]}
    $phobos drive unlock ${drives[1]}
    invoke_lrs -vv

    # Reset error count for mount script
    echo 0 > /tmp/mount_count
    $phobos put --overwrite /etc/hosts oid &&
        error "Put shoud have failed after 4 errors on the medium"

    $phobos tape list -o adm_status | grep failed ||
        error "Tape should be set to failed once the max error is reached"
    $phobos drive list -o adm_status | grep failed &&
        error "No drive should be failed as their health should be one"

    trap - EXIT
    waive_daemons
    cleanup
    # Reset error count for mount script
    echo 0 > /tmp/mount_count
    unset PHOBOS_LRS_max_health
    unset PHOBOS_LTFS_cmd_mount
}

function test_health_device_failure()
{
    local drive=$(get_lto_drives 5 1)
    local tapes=($(get_tapes L5 2 | nodeset -e))
    local cmd=$(mount_failure_cmd 2)

    export PHOBOS_LRS_max_health=3
    export PHOBOS_LTFS_cmd_mount=$cmd

    trap waive_daemons EXIT
    setup_tables
    invoke_daemons

    $phobos drive add --unlock $drive
    $phobos tape add --type LTO5 ${tapes[@]}

    $phobos tape format ${tapes[@]}
    $phobos tape unlock ${tapes[0]}
    $phobos put /etc/hosts oid ||
        error "Put should have succeeded after 2 failures"

    # unmount LTFS
    waive_lrs

    $phobos tape lock ${tapes[0]}
    $phobos tape unlock ${tapes[1]}
    invoke_lrs -vv

    # Reset error count for mount script
    echo 0 > /tmp/mount_count
    $phobos put --overwrite /etc/hosts oid &&
        error "Put shoud have failed after 4 errors on the device"

    $phobos drive list -o adm_status | grep failed ||
        error "Drive should be set to failed once the max error is reached"
    $phobos tape list -o adm_status | grep failed &&
        error "No tape should be failed as their health should be one"

    trap - EXIT
    waive_daemons
    cleanup
    # Reset error count for mount script
    echo 0 > /tmp/mount_count
    unset PHOBOS_LRS_max_health
    unset PHOBOS_LTFS_cmd_mount
}

function test_health_format_without_tlc()
{
    local drive=$(get_lto_drives 5 1)
    local tape=($(get_tapes L5 2 | nodeset -e))

    export PHOBOS_LRS_max_health=1

    setup_tables
    invoke_daemons

    $phobos drive add --unlock $drive
    $phobos tape add --unlock --type LTO5 ${tape[@]}

    # Check that the load operation during the format fails without setting the
    # medium/device to failed.
    waive_tlc
    $phobos tape format ${tape[0]} && error "Format should have failed"

    $phobos tape list -o adm_status ${tape[0]} | grep "unlocked" ||
        error "Tape should be unlocked"
    $phobos drive list -o adm_status | grep "unlocked" ||
        error "Drive should be unlocked"

    invoke_tlc
    $phobos tape format ${tape[0]}
    # Check that the unload operation during the format fails without setting
    # the medium/device to failed.
    waive_tlc
    $phobos tape format ${tape[1]} && error "Format should have failed"

    $phobos tape list -o adm_status ${tape[1]} | grep "unlocked" ||
        error "Tape should be unlocked"
    $phobos drive list -o adm_status | grep "unlocked" ||
        error "Drive should be unlocked"

    waive_lrs
    cleanup
    unset PHOBOS_LRS_max_health
}

function test_health_put_without_tlc()
{
    local drive=$(get_lto_drives 5 1)
    local tape=($(get_tapes L5 2 | nodeset -e))

    export PHOBOS_LRS_max_health=1

    setup_tables
    invoke_daemons

    $phobos drive add --unlock $drive
    $phobos tape add --type LTO5 -T load ${tape[0]}
    $phobos tape add --type LTO5 -T unload ${tape[1]}
    $phobos tape format --unlock ${tape[@]}
    $phobos drive unload $drive

    # Check that the load operation during the put fails without setting the
    # medium/device to failed.
    waive_tlc
    $phobos put -T load /etc/hosts oid && error "Put should have failed"

    $phobos tape list -o adm_status ${tape[0]} | grep "unlocked" ||
        error "Tape should be unlocked"
    $phobos drive list -o adm_status | grep "unlocked" ||
        error "Drive should be unlocked"

    invoke_tlc
    # Remove the lock on tape[0]
    $phobos lock clean --force -t media
    $phobos drive load $drive ${tape[0]}

    # Check that the unload operation during the put fails without setting
    # the medium/device to failed.
    waive_tlc
    $phobos put -T unload /etc/hosts oid && error "Put should have failed"

    $phobos tape list -o adm_status ${tape[1]} | grep "unlocked" ||
        error "Tape should be unlocked"
    $phobos drive list -o adm_status | grep "unlocked" ||
        error "Drive should be unlocked"

    waive_lrs
    cleanup
    unset PHOBOS_LRS_max_health
}

function test_ralloc_2_of_3_dir()
{
    local dir1=$(mktemp -d)
    local dir2=$(mktemp -d)
    local dir3=$(mktemp -d)

    trap "waive_lrs; rm -rf '${dir1}' '${dir2}' '${dir3}'" EXIT
    setup_tables
    invoke_lrs -vv

    $phobos dir add "${dir1}" "${dir2}" "${dir3}"
    $phobos dir format --unlock --fs posix "${dir1}" "${dir2}" "${dir3}"

    local release_medium_name=$($lrs_simple_client get 3 2 \
                                "${dir1}" "${dir2}" "${dir3}" dir)

    kill $PID_LRS
    sleep 1
    ps --pid $PID_LRS || error "Daemon should still be online"

    # send release request
    $lrs_simple_client release 2 ${release_medium_name} dir

    timeout 10 tail --pid=$PID_LRS -f /dev/null
    if [[ $? != 0 ]]; then
        error "Daemon not stopped after 10 seconds"
    fi
    PID_LRS=0
    rm -rf '${dir1}' '${dir2}' '${dir3}'
    cleanup
    trap - EXIT
}

function test_ralloc_2_of_3_tape()
{
    local drives=$(get_lto_drives 6 2)
    local tapes=$(get_tapes L6 3 | nodeset -e)

    trap "waive_daemons; drop_tables" EXIT
    setup_tables
    invoke_daemons

    $phobos drive add --unlock $drives
    $phobos tape add --type lto6 $tapes
    $phobos tape format --unlock $tapes

    local release_medium_name=$($lrs_simple_client get 3 2 $tapes tape)

    kill $PID_LRS
    sleep 1
    ps --pid $PID_LRS || error "Daemon should still be online"

    # send release request
    $lrs_simple_client release 2 ${release_medium_name} tape

    timeout 10 tail --pid=$PID_LRS -f /dev/null
    if [[ $? != 0 ]]; then
        error "Daemon not stopped after 10 seconds"
    fi
    PID_LRS=0
    waive_tlc
    cleanup
    trap - EXIT
}

TEST_SETUP=setup
TEST_CLEANUP=cleanup

TESTS=(
    test_invalid_lock_file
    test_invalid_db_schema_version
    test_multiple_instances
    test_recover_dir_old_locks
    test_remove_invalid_media_locks
    test_wait_end_of_IO_before_shutdown
    test_cancel_waiting_requests_before_shutdown
    test_refuse_new_request_during_shutdown
    test_no_DAEMON_PID_FILEPATH_lock_cleaned
    test_ralloc_2_of_3_dir
)

# Tape tests are available only if /dev/changer exists, which is the entry
# point for the tape library.
if [[ -w /dev/changer ]]; then
    TESTS+=(
        "test_retry_on_error_setup grouped_read; \
         test_retry_on_error; \
         test_retry_on_error_cleanup"
        "test_retry_on_error_setup fifo; \
         test_retry_on_error; \
         test_retry_on_error_cleanup"
        test_recover_drive_old_locks
        test_remove_invalid_device_locks
        "test_mount_failure_during_read_response fifo"
        "test_mount_failure_during_read_response grouped_read"
        test_format_fail_without_suitable_device
        test_fair_share_max_reached
        test_health
        test_health_medium_failure
        test_health_device_failure
        test_health_format_without_tlc
        test_health_put_without_tlc
        test_ralloc_2_of_3_tape
    )
fi
