/* -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
 * vim:expandtab:shiftwidth=4:tabstop=4:
 */
/*
 *  All rights reserved (c) 2014-2024 CEA/DAM.
 *
 *  This file is part of Phobos.
 *
 *  Phobos is free software: you can redistribute it and/or modify it under
 *  the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 2.1 of the License, or
 *  (at your option) any later version.
 *
 *  Phobos is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * \brief   Protobuf file for LRS request/reply protocol.
 */

syntax = "proto2";

import "pho_proto_common.proto";

/** LRS protocol request, emitted by layout modules. */
message PhoRequest {
    /** Body of write allocation request. */
    message Write {
        /** Request for one write accessible medium. */
        message Elt {
            required uint64 size = 1;          // Amount of data to be written
                                               // on the medium.
            repeated string tags = 2;          // Tags to be satisfied.
            required bool empty_medium = 3;    // Whether the client requires an
                                               // empty medium for the operation
                                               // (REPACK for instead)
        }

        repeated Elt media = 1;                // Write allocation requests.
        required PhoResourceFamily family = 2; // Requested resource family.
        required bool prevent_duplicate = 3;   // True if the client does not
                                               // want a medium it already
                                               // allocated
        optional string library = 4;           // Targeted library
        required bool no_split = 5;            // Whether the client requires
                                               // to put all the data on the
                                               // same medium.
        optional string grouping = 6;          // Targeted grouping
    }

    /**
     * Body of read allocation request, request n_required media among
     * the provided med_ids (n_required <= n_med_ids).
     */
    message Read {
        required uint32 n_required     = 1; // Number of media to actually
                                            // allocate among the ones
                                            // specified in med_ids.
        repeated PhoResourceId med_ids = 2; // IDs of the requested media.
        required PhoReadTargetAllocOp operation = 3;
                                            // Operation done on the
                                            // allocation.
    }

    /** Body of the release request. */
    message Release {
        /** Release request for one medium. */
        message Elt {
            required PhoResourceId med_id = 1;  // ID of the medium to release.
            required int32 rc             = 2;  // Outcome of the performed IO
                                                // (0 or -errno).
            required uint64 size_written  = 3;  // Amount of bytes written
                                                // on this medium (0 if the
                                                // medium was only read).
            required uint64 nb_extents_written = 4;
                                                // Number of objects written
                                                // on this medium (0 if the
                                                // medium was only read).
            required bool to_sync         = 5;  // Whether the client requires
                                                // the LRS to perform a sync or
                                                // not.
            optional string grouping = 6;       // Targeted grouping
        }

        repeated Elt media    = 1;  // Description of the media to release.
        required bool partial = 2;  // Whether the client requires the LRS to
                                    // perform only a sync without releasing the
                                    // medium.
        required PhoRequestKind kind = 3;   // Kind of release:
                                            // read or write
    }

    /** Body of the format request. */
    message Format {
        required PhoResourceId med_id = 1; // ID of the medium to format.
        required PhoFsType fs         = 2; // Medium file system.
        required bool unlock          = 3; // True if the medium needs to be
                                           // unlocked after format.
        required bool force           = 4; // True if we do not care about
                                           // the medium status.
    }

    /** Body of the notify request. */
    message Notify {
        required PhoResourceId rsrc_id = 1; // ID of the notified resource.
        required PhoNotifyOp op        = 2; // Notification operation.
        required bool wait             = 3; // Whether the client requires the
                                            // LRS to send its ack once the
                                            // action is complete or not.
    }

    /** Body of the monitor request. */
    message Monitor {
        required PhoResourceFamily family = 1;
    }

    message Configure {
        required PhoConfigureOp op    = 1; // Type of the request
        required string configuration = 2; // JSON format containing
                                           // configuration information. Eg:
                                           // [
                                           //   { "section": "...",
                                           //     "key": "...",
                                           //     "value": "..."},
                                           //   { "section": "...",
                                           //     "key": "...",
                                           //     "value": "..."}
                                           // ]
                                           // The value is only specified for
                                           // set requests, not get.
    }

    required uint32 id           = 1; // Request ID to match its future
                                      // response.
    optional int64 qos           = 2; // Greater means high-priority.
                                      // QOS is more significant than priority.
    optional int64 priority      = 3; // Greater means high-priority.
                                      // Priority will only rank request of the
                                      // same qos.

    // Only exactly one of these fields is expected.
    optional Write walloc        = 4; // Write allocation body.
    optional Read ralloc         = 5; // Read allocation body.
    optional Release release     = 6; // Release body.
    optional Format format       = 7; // Format body.
    optional Notify notify       = 8; // Notify body.
    optional bool ping           = 9; // Is the request a ping request ?
    optional Monitor monitor     = 10; // Monitor body.
    optional Configure configure = 11; // Configure body.
}

/** LRS protocol response, emitted by the LRS. */
message PhoResponse {
    /** Body of the write allocation response. */
    message Write {
        /** Write allocation response for one medium. */
        message Elt {
            required PhoResourceId med_id     = 1;  // ID of the allocated
                                                    // medium.
            required uint64 avail_size        = 2;  // Size available on this
                                                    // medium (potentially less
                                                    // than requested).
            required string root_path         = 3;  // Mount point.
            required PhoFsType fs_type        = 4;  // Filesystem type.
            required PhoAddressType addr_type = 5;  // Address type.
        }

        repeated Elt media                  = 1; // Description of allocated
                                                 // media.
        optional PhoSyncThreshold threshold = 2; // LRS sync threshold.
    }

    /** Body of the read allocation response. */
    message Read {
        /** Read allocation response for one medium. */
        message Elt {
            required PhoResourceId med_id     = 1;  // ID of the allocated
                                                    // medium.
            required string root_path         = 2;  // Mount point.
            required PhoFsType fs_type        = 3;  // Filesystem type.
            required PhoAddressType addr_type = 4;  // Address type.
        }

        repeated Elt media = 1;     // Description of allocated media.
    }

    /** Body of the release response. */
    message Release {
        repeated PhoResourceId med_ids = 1;     // IDs of released media.
        required bool partial          = 2;     // Is a partial release ?
        required PhoRequestKind kind   = 3;     // Kind of release:
                                                // read or write
    }

    /** Body of the format response. */
    message Format {
        required PhoResourceId med_id = 1;      // ID of formatted medium.
    }

    /** Body of the notify response. */
    message Notify {
        required PhoResourceId rsrc_id = 1;      // ID of notified resource.
    }

    /** Body of the error response. */
    message Error {
        required int32 rc                = 1;   // Error code,
                                                // -errno for homogeneity.
        required PhoRequestKind req_kind = 2;   // Kind of request that
                                                // raised the error.
    }

    /** Body of the monitor response */
    message Monitor {
        required string status = 1; // JSON str containing status information.
    }

    message Configure {
        optional string configuration = 1; // JSON format containing
                                           // configuration information. Only
                                           // filled for CONF_GET responses.
                                           // Eg:
                                           // [
                                           //   { "section": "...",
                                           //     "key": "...",
                                           //     "value": "..."},
                                           //   { "section": "...",
                                           //     "key": "...",
                                           //     "value": "..."}
                                           // ]
    }

    required uint32 req_id   = 1;   // Request ID, to be matched with
                                    // the corresponding request.

    // Only exactly one of these fields is expected.
    optional Write walloc        = 2;  // Write allocation body.
    optional Read ralloc         = 3;  // Read allocation body.
    optional Release release     = 4;  // Release body.
    optional Format format       = 5;  // Format body.
    optional Notify notify       = 6;  // Notify body.
    optional Error error         = 8;  // Error body.
    optional bool ping           = 9;  // Is the response a ping response ?
    optional Monitor monitor     = 10; // Monitor body.
    optional Configure configure = 11; // Configure body.
}
